import java.io.ObjectInputStream.GetField;

/**
 * Binary Search Tree, is a node-based binary tree data structure which has the
 * following properties:
 * 
 * The left subtree of a node contains only nodes with keys less than the node’s
 * key. The right subtree of a node contains only nodes with keys greater than
 * the node’s key. The left and right subtree each must also be a binary search
 * tree. There must be no duplicate nodes.
 * 
 * @author viknagar
 *
 */
public class BinarySearchTree {

	Node root;

	class Node {
		int val;
		Node left;
		Node right;

		Node(int val) {
			this.val = val;
		}
	}

	public static void main(String[] args) {
		BinarySearchTree tree = new BinarySearchTree();

		tree.insert(4);
		tree.insert(3);
		tree.insert(1);

		tree.inorder();
	}

	void inorder() {
		inorderRec(root);
	}

	// A utility function to do inorder traversal of BST
	void inorderRec(Node root) {
		if (root != null) {
			inorderRec(root.left);
			System.out.println(root.val);
			inorderRec(root.right);
		}
	}

	public void insert(int val) {
		root = insertIntoBST(root, val);
	}

	public Node insertIntoBST(Node root, int val) {
		if (root == null) {
			root = new Node(val);
			return root;
		}

		if (val < root.val) {
			root.left = insertIntoBST(root.left, val);
		} else if (val > root.val) {
			root.right = insertIntoBST(root.right, val);
		}
		return root;
	}

	public Node getRoot() {
		return root;
	}

}
