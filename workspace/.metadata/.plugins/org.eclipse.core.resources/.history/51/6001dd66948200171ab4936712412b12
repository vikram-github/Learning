/**
 * Binary Search Tree, is a node-based binary tree data structure which has the
 * following properties:
 * 
 * The left subtree of a node contains only nodes with keys less than the node’s
 * key. The right subtree of a node contains only nodes with keys greater than
 * the node’s key. The left and right subtree each must also be a binary search
 * tree. There must be no duplicate nodes.
 * 
 * @author viknagar
 *
 */
public class BinarySearchTree {

	static Node root;

	class Node {
		int val;
		Node left;
		Node right;

		Node(int val) {
			this.val = val;
		}
	}
	
	public static void main(String[] args) {
		BinarySearchTree tree = new BinarySearchTree();
		
		root = tree.insertIntoBST(root, 4);
		root = tree.insertIntoBST(root, 2);
		root = tree.insertIntoBST(root, 5);
		System.out.println(root.val);
	}

	public Node insertIntoBST(Node root, int val) {
		if (root == null) {
			root = new Node(val);
			return root;
		}

		if (val < root.val) {
			return insertIntoBST(root.left, val);
		}
		else if (val > root.val) {
			return insertIntoBST(root.right, val);
		}
		return root;
	}

}
